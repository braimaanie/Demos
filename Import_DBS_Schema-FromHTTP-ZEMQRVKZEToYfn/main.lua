db.generateSchema = require 'db.schema.generate'
local config = require 'encrypt.password'
local Key = 'sdlfjhslkfdjhslkdfjhskj'

-- To avoid saving database credentials into the Lua script ahnd having
-- See http://help.interfaceware.com/v6/encrypt-password-in-file
--To change the database name, user, password and database API type you'll need to 
-- 1) Enter them into these lines
-- 2) Remove the password and host from the file before you same a milestone

config.save{config='appname',     key=Key, password='test'}
config.save{config='apppassword', key=Key, password='123456'}
config.save{config='appuser',     key=Key, password='admin'}
config.save{config='appapi',      key=Key, password=tostring(db.SQLITE)} -- Replace with your API TYPE


local function GetSchema()
   iguana.workingDir()
   local Password = config.load{config='apppassword', key=Key}
   local DbName   = config.load{config='appname', key=Key}
   local DbUser   = config.load{config='appuser', key=Key}
   local DBApi    = tonumber(config.load{config='appapi', key=Key})
   local DB = db.connect{
      api=db.SQLITE, 
      name = '/Users/hbraimaanie/Desktop/test2.db',
      live=true
   }
   
   local Def = db.generateSchema(DB)
   local D = dbs.init{definition=Def}
   local A = D:tables()
   -- 5) Try examining A
   return Def
end

local ErrorMessage

function main(Data)

   --This statement is used to grab the table(s) grammer from the database we are connecting to
   local Success, Schema
   if iguana.isTest() then
      Success = true
      Schema = GetSchema()
   else
      Success, Schema = pcall(GetSchema)    
   end
   if Success then
      net.http.respond{body=Schema, entity_type='text/plain'}
   else
      if type(Schema)=='table' then
         Schema = Schema.message
      end
      net.http.respond{body=ErrorMessage:gsub("#ERROR#", Schema), entity_type='text/html'}
   end
   
   --[[This statement is used to specify a time frame for the incoming messages
   local Time = os.ts.date("%Y/%m/%d %X", os.ts.time() - 60 * 60)
   local Before = os.ts.date("%Y/%m/%d %X", os.ts.time())]]
   
   --This statement is used to connect to our external channel that generates the messages
   local loglist = net.http.get{
      url='http://localhost:6545/api_query', parameters={
         username='admin', password='password',after=Time, 
         before=Before, filter='MSH', source='BI - ADT Generator'
      }, 
      live=true}
   
   --This statement is used to connect to the database (Open Connection)
   local DB = db.connect{
      api=db.SQLITE, 
      name = '/Users/hbraimaanie/Desktop/test2.db',
      live=true}
   
   --This statement is used to parse the messages that are generated by the external channel
   local incoming = xml.parse{data=loglist}
   
--[[This statement is doing most of the work. 
   This is a loop to go through the messages that are being fed into this channel]]
   
   for x=1, incoming.export:childCount("message") do 
      
      --This statement is to parse the incoming messages
      local Msg = hl7.parse{vmd='demo.vmd', data=incoming.export:child('message', x).data:nodeValue()} 
      
      --[[This statement is to load the tables that we created 
      using the grammer that was generated in the begining]]
      dbSchema = dbs.init{filename = 'Tabless.dbs'}
      
      --This statement is to assign a variable to the tables that we created 
      TableOut = dbSchema:tables()
      
      --Patient Table Mapping to our incoming "Msg" values
      TableOut.Patients[1].PatientID = Msg.PID[3][1][1]
      TableOut.Patients[1].First_Name = Msg.PID[5][1][2]:capitalize()
      TableOut.Patients[1].Last_Name = Msg.PID[5][1][1][1]:capitalize()
      
      --Facility Table Mapping to our incoming "Msg" values
      TableOut.Facility[1].FacilityID = tostring(Msg.MSH[7][1])
      TableOut.Facility[1].FacilityName = Msg.MSH[6][1]:nodeValue():upper()
      TableOut.Facility[1].FacilityAddress = Msg.PV1[3][1]:capitalize()
      
      --Mapping data to the new fields
      TableOut.Patients[1].AccountNumber = Msg.PID[18][1]
      TableOut.Facility[1].SendingApp = Msg.MSH[3][1]
      
      DB:merge{data=TableOut,bulk_insert=false, live=false}   
      

--[[Example of SQL statements
      
      --This statement is used to clear the "Patients" in the Schema
      local clear =db.execute{api=db.SQLITE, sql='DELETE FROM Patients WHERE PatientID',
         name='/Users/hbraimaanie/Desktop/test2.db', live=true}
      
      --This statement is used to alter the "Patients" table by adding a "phone" column
      local wds = db.execute{api=db.SQLITE, sql='ALTER TABLE Patients ADD AccountNumber INTEGER', 
      name='/Users/hbraimaanie/Desktop/test2.db', live=false}
      
      --This statement is used to clear the "Facility" in the Schema
      local clear =db.execute{api=db.SQLITE, sql='DELETE FROM Pe "Facility WHERE FacilityID',
         name='/Users/hbraimaanie/Desktop/test2.db', live=false}
      
      --This statement is used to alter the "Patients" table by adding a "phone" column
      local wds = db.execute{api=db.SQLITE, sql='ALTER TABLE Patients ADD phone varchar(10)', 
      name='/Users/hbraimaanie/Desktop/test2.db', live=false}
      
      --This statement is used to display the "Patients" table
      local MP = db.query{api=db.SQLITE, sql='SELECT * FROM Patients', 
      name='/Users/hbraimaanie/Desktop/test2.db', live=false}
      
      --This statement is used to insert information about a patient in the "Patients" table
      local SDF = db.execute{api=db.SQLITE, 
      sql='INSERT INTO Patients (PatientID, First_Name, Last_Name) VALUES (10002, "Clark", "Kent")', 
      name='/Users/hbraimaanie/Desktop/test2.db', live=false}
   
      local tyus = db.query{api=db.SQLITE, 
      sql=' SELECT * FROM Patients', name='/Users/hbraimaanie/Desktop/test2.db', live=false}]]
   end
   
   --This statement will be used to close the connection to the database 
   DB:close()
end

ErrorMessage = [[
<p>
Failed to connect and generate schema.  You probably have not edited
the channel yet to put in the right database credentials.  Please read
the <a href="http://help.interfaceware.com/v6/import-database-schema">instructions here</a>.
</p>
<p>
Basically you'll need to:
</p>
<ol>
<li>Stop the channel</li>
<li>Edit the source code to put in the right credentials for your database</li>
<li>Rerun the channel.</li>
</ol>
<p>
Error message is:
</p>
<pre>
#ERROR#
</pre>
]]
